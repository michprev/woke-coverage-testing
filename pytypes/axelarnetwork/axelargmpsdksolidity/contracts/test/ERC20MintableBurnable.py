from __future__ import annotations

import random 
from dataclasses import dataclass 
from typing import List, NewType, Optional, overload, Union
from typing_extensions import Literal

from woke.testing.core import Contract, Library, Address, Wei, Account, ChainInterface
from woke.testing.internal import TransactionRevertedError
from woke.testing.transactions import LegacyTransaction

from enum import IntEnum
from woke.testing.pytypes_generator import RequestType

from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.interfaces.IERC20MintableBurnable import IERC20MintableBurnable
from pytypes.axelarnetwork.axelargmpsdksolidity.contracts.test.ERC20 import ERC20



class ERC20MintableBurnable(IERC20MintableBurnable, ERC20):
    _abi = {'constructor': {'inputs': [{'internalType': 'string', 'name': 'name_', 'type': 'string'}, {'internalType': 'string', 'name': 'symbol_', 'type': 'string'}, {'internalType': 'uint8', 'name': 'decimals_', 'type': 'uint8'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xddb\xed>': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}, {'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'allowance', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\t^\xa7\xb3': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'approve', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'p\xa0\x821': {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'balanceOf', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x9d\xc2\x9f\xac': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'burn', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'1<\xe5g': {'inputs': [], 'name': 'decimals', 'outputs': [{'internalType': 'uint8', 'name': '', 'type': 'uint8'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa4W\xc2\xd7': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'subtractedValue', 'type': 'uint256'}], 'name': 'decreaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'9P\x93Q': {'inputs': [{'internalType': 'address', 'name': 'spender', 'type': 'address'}, {'internalType': 'uint256', 'name': 'addedValue', 'type': 'uint256'}], 'name': 'increaseAllowance', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'@\xc1\x0f\x19': {'inputs': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'mint', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x06\xfd\xde\x03': {'inputs': [], 'name': 'name', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x95\xd8\x9bA': {'inputs': [], 'name': 'symbol', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'}, b'\x18\x16\r\xdd': {'inputs': [], 'name': 'totalSupply', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\xa9\x05\x9c\xbb': {'inputs': [{'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transfer', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'#\xb8r\xdd': {'inputs': [{'internalType': 'address', 'name': 'sender', 'type': 'address'}, {'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'transferFrom', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'nonpayable', 'type': 'function'}}
    _deployment_code = "60a06040523480156200001157600080fd5b506040516200158e3803806200158e833981810160405281019062000037919062000311565b82828282600390805190602001906200005292919062000086565b5081600490805190602001906200006b92919062000086565b508060ff1660808160ff168152505050505050505062000410565b8280546200009490620003da565b90600052602060002090601f016020900481019282620000b8576000855562000104565b82601f10620000d357805160ff191683800117855562000104565b8280016001018555821562000104579182015b8281111562000103578251825591602001919060010190620000e6565b5b50905062000113919062000117565b5090565b5b808211156200013257600081600090555060010162000118565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200019f8262000154565b810181811067ffffffffffffffff82111715620001c157620001c062000165565b5b80604052505050565b6000620001d662000136565b9050620001e4828262000194565b919050565b600067ffffffffffffffff82111562000207576200020662000165565b5b620002128262000154565b9050602081019050919050565b60005b838110156200023f57808201518184015260208101905062000222565b838111156200024f576000848401525b50505050565b60006200026c6200026684620001e9565b620001ca565b9050828152602081018484840111156200028b576200028a6200014f565b5b620002988482856200021f565b509392505050565b600082601f830112620002b857620002b76200014a565b5b8151620002ca84826020860162000255565b91505092915050565b600060ff82169050919050565b620002eb81620002d3565b8114620002f757600080fd5b50565b6000815190506200030b81620002e0565b92915050565b6000806000606084860312156200032d576200032c62000140565b5b600084015167ffffffffffffffff8111156200034e576200034d62000145565b5b6200035c86828701620002a0565b935050602084015167ffffffffffffffff81111562000380576200037f62000145565b5b6200038e86828701620002a0565b9250506040620003a186828701620002fa565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003f357607f821691505b602082108114156200040a5762000409620003ab565b5b50919050565b6080516111626200042c600039600061045801526111626000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610dc0565b60405180910390f35b61010c60048036038101906101079190610e7b565b610362565b6040516101199190610ed6565b60405180910390f35b61012a610379565b6040516101379190610f00565b60405180910390f35b61015a60048036038101906101559190610f1b565b61037f565b6040516101679190610ed6565b60405180910390f35b610178610456565b6040516101859190610f8a565b60405180910390f35b6101a860048036038101906101a39190610e7b565b61047a565b6040516101b59190610ed6565b60405180910390f35b6101d860048036038101906101d39190610e7b565b610518565b005b6101f460048036038101906101ef9190610fa5565b610526565b6040516102019190610f00565b60405180910390f35b61021261053e565b60405161021f9190610dc0565b60405180910390f35b610242600480360381019061023d9190610e7b565b6105cc565b005b61025e60048036038101906102599190610e7b565b61066c565b60405161026b9190610ed6565b60405180910390f35b61028e60048036038101906102899190610e7b565b61070a565b60405161029b9190610ed6565b60405180910390f35b6102be60048036038101906102b99190610fd2565b610721565b6040516102cb9190610f00565b60405180910390f35b600380546102e190611041565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90611041565b801561035a5780601f1061032f5761010080835404028352916020019161035a565b820191906000526020600020905b81548152906001019060200180831161033d57829003601f168201915b505050505081565b600061036f338484610746565b6001905092915050565b60025481565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461043f5761043e8533858461043991906110a2565b610746565b5b61044a8585856108cf565b60019150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061050e338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461050991906110d6565b610746565b6001905092915050565b6105228282610a8c565b5050565b60006020528060005260406000206000915090505481565b6004805461054b90611041565b80601f016020809104026020016040519081016040528092919081815260200182805461057790611041565b80156105c45780601f10610599576101008083540402835291602001916105c4565b820191906000526020600020905b8154815290600101906020018083116105a757829003601f168201915b505050505081565b61065e823383600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461065991906110a2565b610746565b6106688282610bd7565b5050565b6000610700338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106fb91906110a2565b610746565b6001905092915050565b60006107173384846108cf565b6001905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806107ad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156107e4576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108c29190610f00565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806109365750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561096d576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610978838383610d22565b806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c691906110a2565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a1b91906110d6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a7f9190610f00565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610af3576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aff60008383610d22565b8060026000828254610b1191906110d6565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b6691906110d6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bcb9190610f00565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c3e576040517f6d187b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c4a82600083610d22565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c9891906110a2565b925050819055508060026000828254610cb191906110a2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d169190610f00565b60405180910390a35050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d61578082015181840152602081019050610d46565b83811115610d70576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9282610d27565b610d9c8185610d32565b9350610dac818560208601610d43565b610db581610d76565b840191505092915050565b60006020820190508181036000830152610dda8184610d87565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1282610de7565b9050919050565b610e2281610e07565b8114610e2d57600080fd5b50565b600081359050610e3f81610e19565b92915050565b6000819050919050565b610e5881610e45565b8114610e6357600080fd5b50565b600081359050610e7581610e4f565b92915050565b60008060408385031215610e9257610e91610de2565b5b6000610ea085828601610e30565b9250506020610eb185828601610e66565b9150509250929050565b60008115159050919050565b610ed081610ebb565b82525050565b6000602082019050610eeb6000830184610ec7565b92915050565b610efa81610e45565b82525050565b6000602082019050610f156000830184610ef1565b92915050565b600080600060608486031215610f3457610f33610de2565b5b6000610f4286828701610e30565b9350506020610f5386828701610e30565b9250506040610f6486828701610e66565b9150509250925092565b600060ff82169050919050565b610f8481610f6e565b82525050565b6000602082019050610f9f6000830184610f7b565b92915050565b600060208284031215610fbb57610fba610de2565b5b6000610fc984828501610e30565b91505092915050565b60008060408385031215610fe957610fe8610de2565b5b6000610ff785828601610e30565b925050602061100885828601610e30565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061105957607f821691505b6020821081141561106d5761106c611012565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110ad82610e45565b91506110b883610e45565b9250828210156110cb576110ca611073565b5b828203905092915050565b60006110e182610e45565b91506110ec83610e45565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561112157611120611073565b5b82820190509291505056fea26469706673582212205d39a154cd865f7fc503821f135ab320ecb4b4332b6243daccfbe84c7d58347e64736f6c63430008090033"

    @overload
    @classmethod
    def deploy(cls, name_: str, symbol_: str, decimals_: int, *, from_: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[False] = False, chain: Optional[ChainInterface] = None) -> ERC20MintableBurnable:
        ...

    @overload
    @classmethod
    def deploy(cls, name_: str, symbol_: str, decimals_: int, *, from_: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[True] = True, chain: Optional[ChainInterface] = None) -> LegacyTransaction[ERC20MintableBurnable]:
        ...

    @classmethod
    def deploy(cls, name_: str, symbol_: str, decimals_: int, *, from_: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool = False, chain: Optional[ChainInterface] = None) -> Union[ERC20MintableBurnable, LegacyTransaction[ERC20MintableBurnable]]:
        """
        Args:
            name_: string
            symbol_: string
            decimals_: uint8
        """
        return cls._deploy([name_, symbol_, decimals_], return_tx, ERC20MintableBurnable, from_, value, gas_limit, {}, chain)

    @classmethod
    def deployment_code(cls) -> bytes:
        return cls._get_deployment_code({})

    @overload
    def burn(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[False] = False, request_type: RequestType='default') -> None:
        ...

    @overload
    def burn(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[True] = True, request_type: RequestType='default') -> LegacyTransaction[None]:
        ...

    def burn(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool = False, request_type: RequestType='default') -> Union[None, LegacyTransaction[None]]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("9dc29fac", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("9dc29fac", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

    @overload
    def mint(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[False] = False, request_type: RequestType='default') -> None:
        ...

    @overload
    def mint(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: Literal[True] = True, request_type: RequestType='default') -> LegacyTransaction[None]:
        ...

    def mint(self, account: Union[Account, Address], amount: int, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Wei = 0, gas_limit: Union[int, Literal["max"], Literal["auto"]] = "max", return_tx: bool = False, request_type: RequestType='default') -> Union[None, LegacyTransaction[None]]:
        """
        Args:
            account: address
            amount: uint256
        """
        return self._transact("40c10f19", [account, amount], return_tx, request_type, type(None), from_, to, value, gas_limit) if not request_type == 'call' else self._call("40c10f19", [account, amount], return_tx, type(None), from_, to, value, gas_limit)

